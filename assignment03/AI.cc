#include "AI.hh"

#include <algorithm>
#include <cassert>

#include <glow-extras/timing/PerformanceTimer.hh>
#include <glow/common/log.hh>

#include <glm/ext.hpp>

#include "Components.hh"

static glow::timing::SystemTimer sWallClock;

/// =========== OBFUSCATE START ============

#define _53 auto
#define _57 for
#define _59 transform
#define _54 const
#define _55 vec3
#define _56 float
#define _58 glm
#define _60 static
#define _61 std
#define _63 return
#define _62 if
#define _65 while
#define _69 continue
#define _67 else
#define _64 ::
#define _68 vector
#define _71 dot
#define _70 abs
#define _72 ;
#define _73 sign
#define _74 fieldHeight
#define _75 fieldWidth
#define _78 struct
#define _76 owner
#define _77 halfExtent
#define _80 position
#define _79 paddleMaxAcceleration
#define _81 velocity
#define _82 shape
#define _83 radius
#define _84 .x
#define _85 .y
#define _86 max
#define _87 push_back
#define _88 sqrt
#define _89 clamp
#define _90 size
#define _91 begin
#define _92 end
#define _93 sort
#define _94 numeric_limits
#define _95 int
#define _96 Paddle
#define _97 Ball
#define _98 Parameters
#define _99 size_t

_56 ai::normalAI(_99 _6, _54 _96 &_7, _54 _61 _64 _68<_96> &_8, _54 _61 _64 _68<_97> &_9, _54 _98 &_10, _56 _11, _58 _64 _55 &_12)
{
    _53 _1 = _10._79 _72 _53 _2 = _7._59->_80 _72 _53 _3
        = _2 _84
          + _7._82->_77 _84
                * _58 _64 _73(_10._75 / 2.0f - _2 _84) _72 _78 _4{_56 _51 _72 _56 _52 _72 _61 _64 _68<_56> _50 _72} _72 _61 _64 _68<_4> _5 _72 _57(
                      _53 _54 & _48
                      : _9){_53 _39 = _48._82->_83 _72 _53 _40 = _48._59->_80 _72 _53 _41 = _48._59->_81 _72 _56 _35
                            = _10._74 / 2.0f _72 _53 _36
                            = 0.0f _72 _62(_58 _64 _71(_41 _84, _40 _84 - _2 _84)
                                           > 0){_53 _47 = _58 _64 _70(_40 _84 - (_10._75 - _3)) - _39 _72 _53 _46
                                                = _58 _64 _70(_41 _84) _72 _53 _45 = _47 / _46 _72 _40 += _45 *_41 _72 _36
                                                += _45 _72 _41 _84 *= -1.0f _72} _53 _43
                            = _58 _64 _70(_40 _84 - _3) - _39 _72 _53 _42 = _58 _64 _70(_41 _84) _72 _53 _44
                            = _43 / _42 _72 _35 = _40 _85 + _41 _85 *_44 _72 _36 += _44 _72 _53 _37 = _39 _72 _53 _38
                            = _10._74
                              - _39 _72 _65(_35 < _37 || _35 > _38){_62(_35 < _37) _35 = _37 - (_35 - _37) _72 _62(_35 > _38) _35
                                                                    = _38 - (_35 - _38) _72} _5._87({_35, _36}) _72} _57(_53 & _26
                                                                                                                         : _5)
    {
        _53 _31 = _26._51 _72 _57(_53 _54 & p : _8)
        {
            _62(p._76 != _7._76)
            _69 _72 _53 _32 = p._59->_80 _72 _53 _33 = p._59->_81 _72 _53 _34 = _31 - _32 _85 _72 _53 _27
                = 0.0f _72 _62(_58 _64 _71(_34, _33 _85) < 0.0f){_53 t = _58 _64 _70(_33 _85) / _1 _72 _27 += t _72 _34
                                                                 -= _33 _85 *t _72 _33 _85 = 0.0f _72} _53 _29
                = _58 _64 _70(_33 _85) / _1 _72 _53 _30 = _58 _64 _70(_33 _85 * _33 _85 / _1 / 2.0f) _72 _62(
                      _30 > _58 _64 _70(_34)){_27 += _29 _72 _53 _28 = _58 _64 _70(_30) - _58 _64 _70(_34) _72 _27
                                              += 2 * _58 _64 _88(_28 / _1) _72} _67 _27
                += 2 * _58 _64 _88(_58 _64 _70(_34) / _1) _72 _26._50._87(_27) _72
        }
    }
    _61 _64 _93(_91(_5), _92(_5), [](_4 _54 &l, _4 _54 &r) { _63 l._52 < r._52 _72 }) _72 _61 _64 _68<_95> _20(_5[0]._50._90(), -1) _72 _57(
        _53 _25 = 0u _72 _25 < _5._90() _72++ _25){
        _53 _54 &_22 = _5[_25] _72 _53 _24 = 0u _72 _53 _23
        = _61 _64 _94<_56> _64 _86() _72 _57(_53 i = 0u _72 i < _22._50._90() _72++ i){_62(_20[i] != -1) _69 _72 _62(
            _22._50[i] < _23){_23 = _22._50[i] _72 _24 = i _72}} _62(_20[_24] == -1) _20[_24]
        = _25 _72} _53 _19
        = _10._74 / 2.0f _72 _62(_20[_6] != -1) _19 = _5[_20[_6]]._51 _72 _19
        = _58 _64 _89(_19, _7._82->_77 _85, _10._74 - _7._82->_77 _85) _72 _53 _18 = _19 - _2 _85 _72 _53 _21
        = _7._59->_81 _72 _53 _13 = _1 * (1.0f - 0.98f / (5.0f + _58 _64 _70(_18))) _72 _53 _14
        = _13 * _58 _64 _73(-_21 _85) _72 _53 _15
        = _13
          * _58 _64 _73(_18) _72 _62(_58 _64 _71(_18, _21 _85) < 0.0) _63 _14 _72 _62(_58 _64 _70(_18) > 0.1){
                _53 _16 = _58 _64 _70(_21 _85) / _1 _72 _53 _17
                = _2 _85 + _21 _85 * _16 _72 _62(_58 _64 _71(_18, _19 - _17) < 0.0) _63 _14 _72 _67 _63 _15 _72} _63 0.0f _72
}

float ai::goodAI(size_t _0,
                 const Paddle &_5,
                 const std::vector<Paddle> &_4,
                 const std::vector<Ball> &_12,
                 const Parameters &_39,
                 float _15,
                 glm::vec3 &debugColor)
{
    using namespace _58 _72 _53 _1 = _39._79 _72 _53 _2 = _5._59->_80 _72 _53 _3 = _5._82->halfExtent _85 _72
    std _64 vector<Paddle _54 *> _6 _72 _57 (_53 _54 &p : _4) _62 (p._76 == _5._76) _6.push_back(&p) _72 _53 _7
    = _6._90() _72 _78 _8 { typedef _78 { uint64_t _1 _72 uint64_t _2 _72 } _51 _72 _60 uint32_t _(_51 *_1)
    { uint64_t _2 = _1->_1 _72 _1->_1 = _2 * 6364136223846793005ULL + (_1->_2 | 1) _72 uint32_t _3 = ((_2 >> 18u) ^ _2)
    >> 27u _72 uint32_t _4 = _2 >> 59u _72 _63 (_3 >> _4) | (_3 << ((-_4) & 31)) _72 } _60 _56 _(_56 _1, _56 _2, _56 _3)
    { _1 = _70(_1) _72 _53 _4 = 0.0f _72 _65 (_1 > 0) { _1 -= _2 * _3 _72 _4 += _1 * _2 _72 } _63 max(0.0f, _4) _72 }
    _60 _56 _(_56 _1, _56 _2, _56 _3, _56 _4, _56 _5) { _53 _6 = _70(_2) + _4 * _3 _72 _53 _7 = _70(_1) - _6 * _3
    _72 _63 _(_6, _3, _5) - _7 _72 } _60 _56 _(_56 _1, _56 _2, _56 _3, _56 _4, _98 _54 &_5, _56 _6, int _7
    = 20) { _53 _8 = _5._79 _72 _2 = _58 _64 clamp(_2, _4, _5._74 - _4) _72 _53 _9 = _2 - _1 _72 _53 _10 = _8
    * _58 _64 sign(-_3) _72 _53 _11 = _8 * _58 _64 sign(_9) _72 _62 (_58 _64 _71(_9, _3) < 0.0) { _53 _12 =
    (_70(_9) / _6 + _70(_3)) / _6 _72 _63 _12 * sign(-_3) _72 } _62 (_(_9, _3, _6, -_8, _8) > 0) _63 _10 _72
    _62 (_(_9, _3, _6, _8, _8) < 0) _63 _11 _72 _53 _13 = -_8 _72 _53 _14 = _8 _72 _57 (_53 _15 = 0 _72 _15 <
    _7 _72 ++_15) { _53 _16 = (_13 + _14) / 2.0f _72 _53 _17 = _(_9, _3, _6, _16, _8) _72 _62 (_17 < 0) _13
    = _16 _72 else _62 (_17 > 0) _14 = _16 _72 } _63 _14 _72 } _60 _56 _(_56 _1, _56 _2, _56 _3, _56 _4,
    _56 _5, _56 _6, _98 _54 &_7, _56 _8, _56 *_9, _56 *_10) { _53 _11 = _3 _72 _53 _12 = _4 _72 _53 _13 =
    0.0f _72 _53 _14 = 1 - _7.paddleCollisionDampening _72 _53 _16 = 0 _72 _65 (_70(_11 - _1) > 0.3f || _70(_12) > 2.0f)
    { _53 _15 = _(_11, _1, _12, _6, _7, _8) _72 _15 = clamp(_15, -_7._79, _7._79) _72 _12 += _15 * _8 _72 _11
    += _12 * _8 _72 _62 (_11 < _6) { _11 = _6 _72 _62 (_11 < 0) _12 *= -_14 _72 } _62 (_11 > _7._74 - _6)
    { _11 = _7._74 - _6 _72 _62 (_11 > 0) _12 *= -_14 _72 } _13 += _8 _72 _62 (_13 >= _2) break _72 ++_16 _72
    _62 (_16 > 500) break _72 } *_9 = _11 _72 *_10 = _12 _72 _63 _13 _72 } _60 void _(_97 _54 &_1, _56 _2,
    _98 _54 &_3, _56 _4, _56 *_5, _56 *_6) { _53 _7 = _1._82->_83 _72 _53 _8 = _1._59->_80 _72 _53 _9 =
    _1._59->_81 _72 *_5 = _3._74 / 2.0f _72 *_6 = 0.0f _72 _62 (_58 _64 _71(_9 _84 , _8 _84 - _2) > 0) {
    _53 _10 = _58 _64 _70(_8 _84 - (_3._75 - _2)) - _7 _72 _53 _11 = _58 _64 _70(_9 _84 ) _72 _53 _12 =
    _10 / _11 _72 _8 += _12 * _9 _72 *_6 += _12 _72 _9 _84 *= -1.0f _72 } { *_5 = _8 _85 _72 _53
    _13 = _9 _84 _72 _53 _14 = _9 _85 _72 _53 _15 = _8 _84 _72 _53 _16 = _2 + _7 * _58 _64 sign(_3._75
    / 2.0f - _2) _72 _65 (_58 _64 _71(_15 - _16, _3._75 / 2.0f - _2) > 0) { _53 _21 = _3.ballAcceleration * (_13 > 0
    ? 1.0f : -1.0f) - _3.ballDrag * _13 _72 _53 _22 = -_3.ballDrag * _14 _72 _13 += _21 * _4 _72 _14 += _22 * _4 _72
    _15 += _13 * _4 _72 *_6 += _4 _72 *_5 += _14 * _4 _72 } _53 _17 = _58 _64 _70(_15 - _16) _72 _53 _18 = _58 _64
    _70(_17 / _13) _72 *_6 -= _18 _72 *_5 -= _14 * _18 _72 _53 _19 = _7 _72 _53 _20 = _3._74 - _7 _72 _65 (*_5 < _19 ||
    *_5 > _20) { _62 (*_5 < _19) *_5 = _19 - (*_5 - _19) _72 _62 (*_5 > _20) *_5 = _20 - (*_5 - _20) _72 } } } _72
    } _72 _78 _9 { _97 _54 *_8 _72 _56 _7 _72 } _72 std _64 vector<_9> _10 _72 _57 (_53 _54 &_11 : _12) { _56 _13,
    _14 _72 _8 _64 _(_11, _2 _84 < _39._75 / 2.0f ? 0.0 : _39._75, _39, _15, &_13, &_14) _72 _10.push_back({&_11, _14}) _72
    } std _64 sort(_10.begin(), _10.end(), [](_9 _54 &l, _9 _54 &r) { _63 l._7 < r._7 _72 }) _72 _78 _16 { int _1 = 0 _72
    int _2 = 0 _72 _56 _3 = 0.0f _72 _56 _4 = -1 _72 int _5 = 0 _72 int _6 = 0 _72 } _72 _16 _17 _72 _17._1 = -1 _72
    std _64 vector<uint32_t> _18 _72 _57 (_53 _19 = 0u _72 _19 < _7 _72 ++_19) _18.push_back(_19) _72 _53 _20 = 0 _72 _57
    (_53 _21 = 0u _72 _21 < _12._90() _72 ++_21) { _53 _54 &_22 = *_10[_21]._8 _72 _62 (_58 _64 _71(_22._59->_81 _84 , _2 _84
    - _39._75 / 2.0f) > 0) ++_20 _72 } _53 _23 = 0 _72 _57 (_53 _24 : {true, false}) do { ++_23 _72 _16 _49 _72 std _64
    vector<bool> _27(_12._90(), false) _72 _57 (_53 _26 : _18) { _53 _54 &_32 = _6[_26] _72 _56 _28 = 0.0f _72 _56 _29 =
    -1.0f _72 int _30 = 0 _72 _56 _31 = _32->_59->_80 _85 _72 _56 _33 = _32->_59->_81 _85 _72 _57 (_53 _25 = 0u _72 _25 <
    _12._90() _72 ++_25) { _62 (_27[_25]) _69 _72 _53 _54 &_34 = *_10[_25]._8 _72 _53 _35 = _58 _64 _71(_34._59->_81 _84
    , _2 _84 - _39._75 / 2.0f) < 0 _72 _62 (_35 && !_24) _69 _72 _53 _36 = _32->_59->_80 _84 + _5._82->halfExtent _84 *
    _58 _64 sign(_39._75 / 2.0f - _2 _84 ) _72 _56 _37, _38 _72 _8 _64 _(_34, _36, _39, _15, &_37, &_38) _72 _62 (_38 < _28)
    _69 _72 _53 _40 = _37 _72 _53 _41 = _8 _64 _51{_26 + _23 * 100 + (uint64_t)_34._82, (uint64_t)_34._59} _72 _53 _42 =
    _8 _64 _(&_41) % 1000 _72 _53 _43 = _3 * 0.8f * ((int)_42 - 500) / 500.0f _72 _56 _44 = -1 _72 _56 _45 = -1 _72 _56
    _46 = -1 _72 bool _47 = false _72 _57 (_53 _48 : {_37 + _43, _37, _37 - _3, _37 + _3}) { _48 = _58 _64 clamp(_48, _3,
    _39._74 - _3) _72 _46 = _8 _64 _(_48, _38 - _28, _31, _33, _1, _3, _39, _15, &_44, &_45) _72 _62 (_40 < _44 - _3 ||
    _40 > _44 + _3) _69 _72 _37 = _48 _72 _47 = true _72 break _72 } _62 (!_47) _69 _72 _49._3 += _38 - _46 _72
    _49._3 -= _26 * 0.001 _72 _27[_25] = true _72 ++_30 _72 ++_49._2 _72 _62 (!_35) ++_49._1 _72 _31 = _44 _72 _33 = _45
    _72 _28 = _38 + _15 _72 _62 (_29 < 0) _29 = _37 _72 } _62 (_26 == _0) { _49._4 = _29 _72 _49._5 = _49._6 _72 }
    _62 (_29 < 0.0) _49._6++ _72 } _49._3 += (_49._2 - _49._1) * 0.2 _72 _62 (_49._1 > _17._1 || (_49._1 == _17._1 &&
    _49._3 > _17._3)) _17 = _49 _72 } _65 (std _64 next_permutation(_18.begin(), _18.end())) _72 _53 _30 = _17._4 _72
    _62 (_30 < 0.0) _30 = _39._74 / 2.0f _72 _63 _8 _64 _(_2 _85 , _30, _5._59->_81 _85 , _3, _39, _15) _72
}
